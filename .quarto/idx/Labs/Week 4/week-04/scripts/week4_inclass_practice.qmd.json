{"title":"Week 4 In-Class Practice Exercises","markdown":{"yaml":{"title":"Week 4 In-Class Practice Exercises","subtitle":"Spatial Operations with Pennsylvania Data","author":"Your Name Here","date":"today","format":{"html":{"code-fold":false,"toc":true,"toc-location":"left","theme":"cosmo"}},"execute":{"warning":false,"message":false}},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n```{r setup}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(here)\n# Set Census API key\ncensus_api_key(\"42bf8a20a3df1def380f330cf7edad0dd5842ce6\")\n\n# Load the data (same as lecture)\npa_counties <- st_read(here(\"data/Pennsylvania_County_Boundaries.shp\"))\ndistricts <- st_read(here(\"data/districts.geojson\"))\nhospitals <- st_read(here(\"data/hospitals.geojson\"))\ncensus_tracts <- tracts(state = \"PA\", cb = TRUE)\nmetro_areas <- core_based_statistical_areas(cb = TRUE)\n\n# Standardize CRS\nhospitals <- st_transform(hospitals, st_crs(pa_counties))\ncensus_tracts <- st_transform(census_tracts, st_crs(pa_counties))\nmetro_areas <- st_transform(metro_areas, st_crs(pa_counties))\ndistricts <- st_transform(districts, st_crs(census_tracts))\n```\n\n---\n\n## Exercise 1: Find Your County's Neighbors (10 minutes)\n\n**Goal:** Practice spatial filtering with different predicates\n\n### 1.1 Pick a Pennsylvania County\n\n**Your Task:** Choose any PA county and find all counties that border it.\n\n```{r}\n# Step 1: Look at available county names\nunique(pa_counties$COUNTY_NAM)\n\n# Step 2: Pick one county (change this to your choice!)\nmy_county <- pa_counties %>%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change \"CENTRE\" to your county\n\n# Step 3: Find neighbors using st_touches\nmy_neighbors <- pa_counties %>%\n  st_filter(my_county, .predicate = st_touches)\n\n# Step 4: How many neighbors does your county have?\ncat(\"Number of neighboring counties:\", nrow(my_neighbors), \"\\n\")\nprint(\"Neighbor names:\")\nprint(my_neighbors$COUNTY_NAM)\n```\n\n### 1.2 Map Your Results\n\n**Your Task:** Create a map showing your county and its neighbors in different colors.\n\n```{r}\n# Create the map\nggplot() +\n  geom_sf(data = pa_counties, fill = \"lightgray\", color = \"white\") +\n  geom_sf(data = my_neighbors, fill = \"lightblue\", alpha = 0.7) +\n  geom_sf(data = my_county, fill = \"darkblue\") +\n  labs(\n    title = paste(\"Neighbors of\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = paste(nrow(my_neighbors), \"neighboring counties\")\n  ) +\n  theme_void()\n```\n\n### 1.3 Challenge: Compare with st_intersects\n\n**Your Task:** What happens if you use `st_intersects` instead of `st_touches`? Why is the count different?\n\n```{r}\n# Use st_intersects\nintersecting_counties <- pa_counties %>%\n  st_filter(my_county, .predicate = st_intersects)\n\ncat(\"With st_touches:\", nrow(my_neighbors), \"counties\\n\")\ncat(\"With st_intersects:\", nrow(intersecting_counties), \"counties\\n\")\ncat(\"Difference:\", nrow(intersecting_counties) - nrow(my_neighbors), \"\\n\")\n```\n\n**Question:** Why is there a difference of 1? What does this tell you about the difference between `st_touches` and `st_intersects`?\n\n---\n\n## Exercise 2: Hospital Service Areas (15 minutes)\n\n**Goal:** Practice buffering and measuring accessibility\n\n### 2.1 Create Hospital Service Areas\n\n**Your Task:** Create 15-mile (24140 meter) service areas around all hospitals in your county.\n\n```{r}\n# Step 1: Filter hospitals in your county\n# First do a spatial join to assign counties to hospitals\nhospitals_with_county <- hospitals %>%\n  st_join(pa_counties %>% select(COUNTY_NAM))\n\n# Filter for your county's hospitals\nmy_county_hospitals <- hospitals_with_county %>%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change to match your county\n\ncat(\"Number of hospitals in county:\", nrow(my_county_hospitals), \"\\n\")\n\n# Step 2: Project to accurate CRS for buffering\nmy_county_hospitals_proj <- my_county_hospitals %>%\n  st_transform(3365)  # Pennsylvania State Plane South\n\n# Step 3: Create 15-mile buffers (24140 meters = 15 miles)\nhospital_service_areas <- my_county_hospitals_proj %>%\n  st_buffer(dist = 79200)  # 15 miles in feet for PA State Plane\n\n# Step 4: Transform back for mapping\nhospital_service_areas <- st_transform(hospital_service_areas, st_crs(pa_counties))\n```\n\n### 2.2 Map Service Coverage\n\n**Your Task:** Create a map showing hospitals and their service areas.\n\n```{r}\nggplot() +\n  geom_sf(data = my_county, fill = \"white\", color = \"gray\") +\n  geom_sf(data = hospital_service_areas, fill = \"lightblue\", alpha = 0.4) +\n  geom_sf(data = my_county_hospitals, color = \"red\", size = 2) +\n  labs(\n    title = paste(\"Hospital Service Areas in\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = \"Red points = Hospitals, Blue areas = 15-mile service zones\"\n  ) +\n  theme_void()\n```\n\n### 2.3 Calculate Coverage\n\n**Your Task:** What percentage of your county is within 15 miles of a hospital?\n\n```{r}\n# Union all service areas into one polygon\ncombined_service_area <- hospital_service_areas %>%\n  st_union()\n\n# Calculate areas (need to be in projected CRS)\nmy_county_proj <- st_transform(my_county, 3365)\ncombined_service_proj <- st_transform(combined_service_area, 3365)\n\n# Find intersection\ncoverage_area <- st_intersection(my_county_proj, combined_service_proj)\n\n# Calculate percentages\ncounty_area <- as.numeric(st_area(my_county_proj))\ncovered_area <- as.numeric(st_area(coverage_area))\ncoverage_pct <- (covered_area / county_area) * 100\n\ncat(\"County area:\", round(county_area / 1e6, 1), \"sq km\\n\")\ncat(\"Covered area:\", round(covered_area / 1e6, 1), \"sq km\\n\")\ncat(\"Coverage:\", round(coverage_pct, 1), \"%\\n\")\n```\n\n**Question:** Is your county well-served by hospitals? What areas might be underserved?\n\n---\n\n## Exercise 3: Congressional District Analysis (15 minutes)\n\n**Goal:** Practice spatial joins and aggregation\n\n### 4.1 Join Districts to Counties\n\n**Your Task:** Figure out which congressional districts overlap with each county.\n\n```{r}\n# Spatial join: districts to counties\ndistricts_by_county <- districts %>%\n  st_join(pa_counties %>% select(COUNTY_NAM)) %>%\n  st_drop_geometry() %>%\n  group_by(COUNTY_NAM) %>%\n  summarize(\n    n_districts = n_distinct(OBJECTID),\n    district_ids = paste(unique(MSLINK), collapse = \", \")\n  ) %>%\n  arrange(desc(n_districts))\n\n# Which counties have the most districts?\nhead(districts_by_county, 10)\n```\n\n\n### 4.2 Calculate District Statistics\n\n**Your Task:** Get demographic data for census tracts and aggregate to districts.\n\n```{r}\n# Get tract-level demographics\ntract_demographics <- get_acs(\n  geography = \"tract\",\n  variables = c(\n    total_pop = \"B01003_001\",\n    median_income = \"B19013_001\",\n    white_pop = \"B03002_003\",\n    black_pop = \"B03002_004\",\n    hispanic_pop = \"B03002_012\"\n  ),\n  state = \"PA\",\n  year = 2022,\n  output = \"wide\"\n)\n\n# Join to tract boundaries\ntracts_with_data <- census_tracts %>%\n  left_join(tract_demographics, by = \"GEOID\")\n\n# Spatial join to districts and aggregate\ndistrict_demographics <- tracts_with_data %>%\n  st_join(districts) %>%\n  st_drop_geometry() %>%\n  group_by(OBJECTID, MSLINK) %>%\n  summarize(\n    total_population = sum(total_popE, na.rm = TRUE),\n    median_income = weighted.mean(median_incomeE, total_popE, na.rm = TRUE),\n    pct_white = sum(white_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_black = sum(black_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_hispanic = sum(hispanic_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    n_tracts = n()\n  ) %>%\n  arrange(desc(total_population))\n\n# Show results\nhead(district_demographics, 10)\n```\n\n### 4.3 Map District Demographics\n\n**Your Task:** Create a choropleth map of median income by congressional district.\n\n```{r}\n# Join demographics back to district boundaries\ndistricts_with_demographics <- districts %>%\n  left_join(district_demographics, by = \"OBJECTID\")\n\n# Create the map\nggplot(districts_with_demographics) +\n  geom_sf(aes(fill = median_income), color = \"white\", size = 0.5) +\n  scale_fill_viridis_c(\n    name = \"Median\\nIncome\",\n    labels = dollar,\n    option = \"plasma\"\n  ) +\n  labs(\n    title = \"Median Household Income by Congressional District\",\n    subtitle = \"Pennsylvania\",\n    caption = \"Source: ACS 2018-2022\"\n  ) +\n  theme_void()\n```\n\n### 4.4 Challenge: Find Diverse Districts\n\n**Your Task:** Which districts are the most racially diverse?\n\n```{r}\n# Calculate diversity index (simple version: higher = more diverse)\n# A perfectly even distribution would be ~33% each for 3 groups\ndistrict_demographics <- district_demographics %>%\n  mutate(\n    diversity_score = 100 - abs(pct_white - 33.3) - abs(pct_black - 33.3) - abs(pct_hispanic - 33.3)\n  ) %>%\n  arrange(desc(diversity_score))\n\n# Most diverse districts\nhead(district_demographics %>% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n\n# Least diverse districts\ntail(district_demographics %>% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n```\n\n---\n\n## Exercise 5: Projection Effects (10 minutes)\n\n**Goal:** Understand how CRS affects calculations\n\n### 5.1 Calculate Areas in Different Projections\n\n**Your Task:** Calculate county areas using different coordinate systems and compare.\n\n```{r}\n# Calculate areas in different CRS\narea_comparison <- pa_counties %>%\n  # Geographic (WGS84) - WRONG for areas!\n  st_transform(4326) %>%\n  mutate(area_geographic = as.numeric(st_area(.))) %>%\n  # PA State Plane South - Good for PA\n  st_transform(3365) %>%\n  mutate(area_state_plane = as.numeric(st_area(.))) %>%\n  # Albers Equal Area - Good for areas\n  st_transform(5070) %>%\n  mutate(area_albers = as.numeric(st_area(.))) %>%\n  st_drop_geometry() %>%\n  select(COUNTY_NAM, starts_with(\"area_\")) %>%\n  mutate(\n    # Calculate errors compared to Albers (most accurate for area)\n    error_geographic_pct = abs(area_geographic - area_albers) / area_albers * 100,\n    error_state_plane_pct = abs(area_state_plane - area_albers) / area_state_plane * 100\n  )\n\n# Show counties with biggest errors\narea_comparison %>%\n  arrange(desc(error_geographic_pct)) %>%\n  select(COUNTY_NAM, error_geographic_pct, error_state_plane_pct) %>%\n  head(10)\n```\n\n### 5.2 Visualize the Error\n\n**Your Task:** Map which counties have the biggest area calculation errors.\n\n```{r}\n# Join error data back to counties\ncounties_with_errors <- pa_counties %>%\n  left_join(\n    area_comparison %>% select(COUNTY_NAM, error_geographic_pct),\n    by = \"COUNTY_NAM\"\n  )\n\n# Map the error\nggplot(counties_with_errors) +\n  geom_sf(aes(fill = error_geographic_pct), color = \"white\") +\n  scale_fill_viridis_c(\n    name = \"Area\\nError %\",\n    option = \"magma\"\n  ) +\n  labs(\n    title = \"Area Calculation Errors by County\",\n    subtitle = \"Using geographic coordinates (WGS84) instead of projected CRS\"\n  ) +\n  theme_void()\n```\n\n**Question:** Which counties have the largest errors? Why might this be?\n\n---\n\n## Bonus Challenge: Combined Analysis (If Time Permits)\n\n**Goal:** Combine multiple operations for a complex policy question\n\n### Research Question\n\n**Which Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?**\n\n**Your Task:** Combine what you've learned to identify vulnerable, underserved communities.\n\n**Steps:**\n1. Get demographic (elderly and income) data for census tracts\n2. Identify vulnerable tracts (low income AND high elderly population)\n3. Calculate distance to nearest hospital\n4. Check which ones are more than 15 miles from a hospital\n5. Aggregate to county level\n6. Create comprehensive map\n7. Create a summary table\n\n```{r}\n# Your code here!\n\n\n\n\n\n\n\n```\n\n\n---\n\n## Reflection Questions\n\nAfter completing these exercises, reflect on:\n\n1. **When did you need to transform CRS?** Why was this necessary?\n\n2. **What's the difference between `st_filter()` and `st_intersection()`?** When would you use each?\n\n3. **How does the choice of predicate (st_touches, st_intersects, st_within) change your results?**\n\n\n---\n\n## Summary of Key Functions Used\n\n| Function | Purpose | Example Use |\n|----------|---------|-------------|\n| `st_filter()` | Select features by spatial relationship | Find neighboring counties |\n| `st_buffer()` | Create zones around features | Hospital service areas |\n| `st_intersects()` | Test spatial overlap | Check access to services |\n| `st_disjoint()` | Test spatial separation | Find rural areas |\n| `st_join()` | Join by location | Add county info to tracts |\n| `st_union()` | Combine geometries | Merge overlapping buffers |\n| `st_intersection()` | Clip geometries | Calculate overlap areas |\n| `st_transform()` | Change CRS | Accurate distance/area calculations |\n| `st_area()` | Calculate areas | County sizes, coverage |\n| `st_distance()` | Calculate distances | Distance to facilities |\n\n**Important Reminder:** Always *check* and standardize CRS when working with spatial data from multiple sources!","srcMarkdownNoYaml":"\n\n## Setup\n\n```{r setup}\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(here)\n# Set Census API key\ncensus_api_key(\"42bf8a20a3df1def380f330cf7edad0dd5842ce6\")\n\n# Load the data (same as lecture)\npa_counties <- st_read(here(\"data/Pennsylvania_County_Boundaries.shp\"))\ndistricts <- st_read(here(\"data/districts.geojson\"))\nhospitals <- st_read(here(\"data/hospitals.geojson\"))\ncensus_tracts <- tracts(state = \"PA\", cb = TRUE)\nmetro_areas <- core_based_statistical_areas(cb = TRUE)\n\n# Standardize CRS\nhospitals <- st_transform(hospitals, st_crs(pa_counties))\ncensus_tracts <- st_transform(census_tracts, st_crs(pa_counties))\nmetro_areas <- st_transform(metro_areas, st_crs(pa_counties))\ndistricts <- st_transform(districts, st_crs(census_tracts))\n```\n\n---\n\n## Exercise 1: Find Your County's Neighbors (10 minutes)\n\n**Goal:** Practice spatial filtering with different predicates\n\n### 1.1 Pick a Pennsylvania County\n\n**Your Task:** Choose any PA county and find all counties that border it.\n\n```{r}\n# Step 1: Look at available county names\nunique(pa_counties$COUNTY_NAM)\n\n# Step 2: Pick one county (change this to your choice!)\nmy_county <- pa_counties %>%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change \"CENTRE\" to your county\n\n# Step 3: Find neighbors using st_touches\nmy_neighbors <- pa_counties %>%\n  st_filter(my_county, .predicate = st_touches)\n\n# Step 4: How many neighbors does your county have?\ncat(\"Number of neighboring counties:\", nrow(my_neighbors), \"\\n\")\nprint(\"Neighbor names:\")\nprint(my_neighbors$COUNTY_NAM)\n```\n\n### 1.2 Map Your Results\n\n**Your Task:** Create a map showing your county and its neighbors in different colors.\n\n```{r}\n# Create the map\nggplot() +\n  geom_sf(data = pa_counties, fill = \"lightgray\", color = \"white\") +\n  geom_sf(data = my_neighbors, fill = \"lightblue\", alpha = 0.7) +\n  geom_sf(data = my_county, fill = \"darkblue\") +\n  labs(\n    title = paste(\"Neighbors of\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = paste(nrow(my_neighbors), \"neighboring counties\")\n  ) +\n  theme_void()\n```\n\n### 1.3 Challenge: Compare with st_intersects\n\n**Your Task:** What happens if you use `st_intersects` instead of `st_touches`? Why is the count different?\n\n```{r}\n# Use st_intersects\nintersecting_counties <- pa_counties %>%\n  st_filter(my_county, .predicate = st_intersects)\n\ncat(\"With st_touches:\", nrow(my_neighbors), \"counties\\n\")\ncat(\"With st_intersects:\", nrow(intersecting_counties), \"counties\\n\")\ncat(\"Difference:\", nrow(intersecting_counties) - nrow(my_neighbors), \"\\n\")\n```\n\n**Question:** Why is there a difference of 1? What does this tell you about the difference between `st_touches` and `st_intersects`?\n\n---\n\n## Exercise 2: Hospital Service Areas (15 minutes)\n\n**Goal:** Practice buffering and measuring accessibility\n\n### 2.1 Create Hospital Service Areas\n\n**Your Task:** Create 15-mile (24140 meter) service areas around all hospitals in your county.\n\n```{r}\n# Step 1: Filter hospitals in your county\n# First do a spatial join to assign counties to hospitals\nhospitals_with_county <- hospitals %>%\n  st_join(pa_counties %>% select(COUNTY_NAM))\n\n# Filter for your county's hospitals\nmy_county_hospitals <- hospitals_with_county %>%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change to match your county\n\ncat(\"Number of hospitals in county:\", nrow(my_county_hospitals), \"\\n\")\n\n# Step 2: Project to accurate CRS for buffering\nmy_county_hospitals_proj <- my_county_hospitals %>%\n  st_transform(3365)  # Pennsylvania State Plane South\n\n# Step 3: Create 15-mile buffers (24140 meters = 15 miles)\nhospital_service_areas <- my_county_hospitals_proj %>%\n  st_buffer(dist = 79200)  # 15 miles in feet for PA State Plane\n\n# Step 4: Transform back for mapping\nhospital_service_areas <- st_transform(hospital_service_areas, st_crs(pa_counties))\n```\n\n### 2.2 Map Service Coverage\n\n**Your Task:** Create a map showing hospitals and their service areas.\n\n```{r}\nggplot() +\n  geom_sf(data = my_county, fill = \"white\", color = \"gray\") +\n  geom_sf(data = hospital_service_areas, fill = \"lightblue\", alpha = 0.4) +\n  geom_sf(data = my_county_hospitals, color = \"red\", size = 2) +\n  labs(\n    title = paste(\"Hospital Service Areas in\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = \"Red points = Hospitals, Blue areas = 15-mile service zones\"\n  ) +\n  theme_void()\n```\n\n### 2.3 Calculate Coverage\n\n**Your Task:** What percentage of your county is within 15 miles of a hospital?\n\n```{r}\n# Union all service areas into one polygon\ncombined_service_area <- hospital_service_areas %>%\n  st_union()\n\n# Calculate areas (need to be in projected CRS)\nmy_county_proj <- st_transform(my_county, 3365)\ncombined_service_proj <- st_transform(combined_service_area, 3365)\n\n# Find intersection\ncoverage_area <- st_intersection(my_county_proj, combined_service_proj)\n\n# Calculate percentages\ncounty_area <- as.numeric(st_area(my_county_proj))\ncovered_area <- as.numeric(st_area(coverage_area))\ncoverage_pct <- (covered_area / county_area) * 100\n\ncat(\"County area:\", round(county_area / 1e6, 1), \"sq km\\n\")\ncat(\"Covered area:\", round(covered_area / 1e6, 1), \"sq km\\n\")\ncat(\"Coverage:\", round(coverage_pct, 1), \"%\\n\")\n```\n\n**Question:** Is your county well-served by hospitals? What areas might be underserved?\n\n---\n\n## Exercise 3: Congressional District Analysis (15 minutes)\n\n**Goal:** Practice spatial joins and aggregation\n\n### 4.1 Join Districts to Counties\n\n**Your Task:** Figure out which congressional districts overlap with each county.\n\n```{r}\n# Spatial join: districts to counties\ndistricts_by_county <- districts %>%\n  st_join(pa_counties %>% select(COUNTY_NAM)) %>%\n  st_drop_geometry() %>%\n  group_by(COUNTY_NAM) %>%\n  summarize(\n    n_districts = n_distinct(OBJECTID),\n    district_ids = paste(unique(MSLINK), collapse = \", \")\n  ) %>%\n  arrange(desc(n_districts))\n\n# Which counties have the most districts?\nhead(districts_by_county, 10)\n```\n\n\n### 4.2 Calculate District Statistics\n\n**Your Task:** Get demographic data for census tracts and aggregate to districts.\n\n```{r}\n# Get tract-level demographics\ntract_demographics <- get_acs(\n  geography = \"tract\",\n  variables = c(\n    total_pop = \"B01003_001\",\n    median_income = \"B19013_001\",\n    white_pop = \"B03002_003\",\n    black_pop = \"B03002_004\",\n    hispanic_pop = \"B03002_012\"\n  ),\n  state = \"PA\",\n  year = 2022,\n  output = \"wide\"\n)\n\n# Join to tract boundaries\ntracts_with_data <- census_tracts %>%\n  left_join(tract_demographics, by = \"GEOID\")\n\n# Spatial join to districts and aggregate\ndistrict_demographics <- tracts_with_data %>%\n  st_join(districts) %>%\n  st_drop_geometry() %>%\n  group_by(OBJECTID, MSLINK) %>%\n  summarize(\n    total_population = sum(total_popE, na.rm = TRUE),\n    median_income = weighted.mean(median_incomeE, total_popE, na.rm = TRUE),\n    pct_white = sum(white_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_black = sum(black_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_hispanic = sum(hispanic_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    n_tracts = n()\n  ) %>%\n  arrange(desc(total_population))\n\n# Show results\nhead(district_demographics, 10)\n```\n\n### 4.3 Map District Demographics\n\n**Your Task:** Create a choropleth map of median income by congressional district.\n\n```{r}\n# Join demographics back to district boundaries\ndistricts_with_demographics <- districts %>%\n  left_join(district_demographics, by = \"OBJECTID\")\n\n# Create the map\nggplot(districts_with_demographics) +\n  geom_sf(aes(fill = median_income), color = \"white\", size = 0.5) +\n  scale_fill_viridis_c(\n    name = \"Median\\nIncome\",\n    labels = dollar,\n    option = \"plasma\"\n  ) +\n  labs(\n    title = \"Median Household Income by Congressional District\",\n    subtitle = \"Pennsylvania\",\n    caption = \"Source: ACS 2018-2022\"\n  ) +\n  theme_void()\n```\n\n### 4.4 Challenge: Find Diverse Districts\n\n**Your Task:** Which districts are the most racially diverse?\n\n```{r}\n# Calculate diversity index (simple version: higher = more diverse)\n# A perfectly even distribution would be ~33% each for 3 groups\ndistrict_demographics <- district_demographics %>%\n  mutate(\n    diversity_score = 100 - abs(pct_white - 33.3) - abs(pct_black - 33.3) - abs(pct_hispanic - 33.3)\n  ) %>%\n  arrange(desc(diversity_score))\n\n# Most diverse districts\nhead(district_demographics %>% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n\n# Least diverse districts\ntail(district_demographics %>% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n```\n\n---\n\n## Exercise 5: Projection Effects (10 minutes)\n\n**Goal:** Understand how CRS affects calculations\n\n### 5.1 Calculate Areas in Different Projections\n\n**Your Task:** Calculate county areas using different coordinate systems and compare.\n\n```{r}\n# Calculate areas in different CRS\narea_comparison <- pa_counties %>%\n  # Geographic (WGS84) - WRONG for areas!\n  st_transform(4326) %>%\n  mutate(area_geographic = as.numeric(st_area(.))) %>%\n  # PA State Plane South - Good for PA\n  st_transform(3365) %>%\n  mutate(area_state_plane = as.numeric(st_area(.))) %>%\n  # Albers Equal Area - Good for areas\n  st_transform(5070) %>%\n  mutate(area_albers = as.numeric(st_area(.))) %>%\n  st_drop_geometry() %>%\n  select(COUNTY_NAM, starts_with(\"area_\")) %>%\n  mutate(\n    # Calculate errors compared to Albers (most accurate for area)\n    error_geographic_pct = abs(area_geographic - area_albers) / area_albers * 100,\n    error_state_plane_pct = abs(area_state_plane - area_albers) / area_state_plane * 100\n  )\n\n# Show counties with biggest errors\narea_comparison %>%\n  arrange(desc(error_geographic_pct)) %>%\n  select(COUNTY_NAM, error_geographic_pct, error_state_plane_pct) %>%\n  head(10)\n```\n\n### 5.2 Visualize the Error\n\n**Your Task:** Map which counties have the biggest area calculation errors.\n\n```{r}\n# Join error data back to counties\ncounties_with_errors <- pa_counties %>%\n  left_join(\n    area_comparison %>% select(COUNTY_NAM, error_geographic_pct),\n    by = \"COUNTY_NAM\"\n  )\n\n# Map the error\nggplot(counties_with_errors) +\n  geom_sf(aes(fill = error_geographic_pct), color = \"white\") +\n  scale_fill_viridis_c(\n    name = \"Area\\nError %\",\n    option = \"magma\"\n  ) +\n  labs(\n    title = \"Area Calculation Errors by County\",\n    subtitle = \"Using geographic coordinates (WGS84) instead of projected CRS\"\n  ) +\n  theme_void()\n```\n\n**Question:** Which counties have the largest errors? Why might this be?\n\n---\n\n## Bonus Challenge: Combined Analysis (If Time Permits)\n\n**Goal:** Combine multiple operations for a complex policy question\n\n### Research Question\n\n**Which Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?**\n\n**Your Task:** Combine what you've learned to identify vulnerable, underserved communities.\n\n**Steps:**\n1. Get demographic (elderly and income) data for census tracts\n2. Identify vulnerable tracts (low income AND high elderly population)\n3. Calculate distance to nearest hospital\n4. Check which ones are more than 15 miles from a hospital\n5. Aggregate to county level\n6. Create comprehensive map\n7. Create a summary table\n\n```{r}\n# Your code here!\n\n\n\n\n\n\n\n```\n\n\n---\n\n## Reflection Questions\n\nAfter completing these exercises, reflect on:\n\n1. **When did you need to transform CRS?** Why was this necessary?\n\n2. **What's the difference between `st_filter()` and `st_intersection()`?** When would you use each?\n\n3. **How does the choice of predicate (st_touches, st_intersects, st_within) change your results?**\n\n\n---\n\n## Summary of Key Functions Used\n\n| Function | Purpose | Example Use |\n|----------|---------|-------------|\n| `st_filter()` | Select features by spatial relationship | Find neighboring counties |\n| `st_buffer()` | Create zones around features | Hospital service areas |\n| `st_intersects()` | Test spatial overlap | Check access to services |\n| `st_disjoint()` | Test spatial separation | Find rural areas |\n| `st_join()` | Join by location | Add county info to tracts |\n| `st_union()` | Combine geometries | Merge overlapping buffers |\n| `st_intersection()` | Clip geometries | Calculate overlap areas |\n| `st_transform()` | Change CRS | Accurate distance/area calculations |\n| `st_area()` | Calculate areas | County sizes, coverage |\n| `st_distance()` | Calculate distances | Distance to facilities |\n\n**Important Reminder:** Always *check* and standardize CRS when working with spatial data from multiple sources!"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"week4_inclass_practice.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":"cosmo","title":"Week 4 In-Class Practice Exercises","subtitle":"Spatial Operations with Pennsylvania Data","author":"Your Name Here","date":"today","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}