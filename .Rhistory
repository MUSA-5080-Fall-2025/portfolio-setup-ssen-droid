install.packages("tidyverse")
install.packages("tidycensus")
install.packages("knitr")
quarto::quarto_render()
quarto preview
quarto::quarto_preview()
Sys.getenv("CENSUS_API_KEY")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
# Set your Census API key
# Choose your state for analysis - assign it to a variable called my_state
library(tidycensus)
library(tidyverse)
library(knitr)
library(stringr)
options(tigris_use_cache = TRUE)
my_state <- "New York"
nzchar(Sys.getenv("CENSUS_API_KEY"))
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
# Set your Census API key
# Choose your state for analysis - assign it to a variable called my_state
# Write your get_acs() code here
# ---- 2.1 County-level data (ACS 2022 5-year) ----
vars <- c(
med_income = "B19013_001",  # Median household income
total_pop  = "B01003_001"   # Total population
)
county_raw <- get_acs(
geography = "county",
variables = vars,
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
# Display the first few rows
# ---- 2.1 County-level data (ACS 2022 5-year) ----
vars <- c(
med_income = "B19013_001",  # Median household income
total_pop  = "B01003_001"   # Total population
)
county_raw <- get_acs(
geography = "county",
variables = vars,
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
# Set your Census API key
# Choose your state for analysis - assign it to a variable called my_state
library(tidycensus)
library(tidyverse)
library(knitr)
library(stringr)
options(tigris_use_cache = TRUE)
my_state <- "New York"
# ---- 2.1 County-level data (ACS 2022 5-year) ----
vars <- c(
med_income = "B19013_001",  # Median household income
total_pop  = "B01003_001"   # Total population
)
county_raw <- get_acs(
geography = "county",
variables = vars,
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
county <- county_raw %>%
mutate(
county = name %>%
stringr::str_remove(",\\s*.*$") %>%  # drop ", State"
stringr::str_remove("\\s*County$")   # drop trailing "County"
) %>%
select(
county, GEOID,
med_incomeE, med_incomeM,
total_popE,  total_popM
)
# ---- 2.1 County-level data (ACS 2022 5-year) ----
vars <- c(
med_income = "B19013_001",  # Median household income
total_pop  = "B01003_001"   # Total population
)
county_raw <- get_acs(
geography = "county",
variables = vars,
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
county <- county_raw %>%
mutate(
county = NAME %>%
stringr::str_remove(",\\s*.*$") %>%  # drop ", State"
stringr::str_remove("\\s*County$")   # drop trailing "County"
) %>%
select(
county, GEOID,
med_incomeE, med_incomeM,
total_popE,  total_popM
)
knitr::kable(
head(county, 10),
caption = paste("County-level ACS (2022 5-year) for", my_state),
digits = 0
)
# ---- 2.2A: compute MOE% for median income ----
county_moe <- county %>%
dplyr::mutate(
income_moe_pct = dplyr::if_else(
!is.na(med_incomeE) & med_incomeE > 0 & !is.na(med_incomeM),
100 * med_incomeM / med_incomeE,
NA_real_
)
)
# peek at just the columns we care about
knitr::kable(
county_moe %>%
dplyr::select(county, med_incomeE, med_incomeM, income_moe_pct) %>%
head(10),
caption = "MOE% for median income (first 10 counties)",
digits = c(0, 0, 0, 1)
)
# ---- 2.2B: add reliability category ----
county_reliability <- county_moe %>%
dplyr::mutate(
reliability = dplyr::case_when(
is.na(income_moe_pct) ~ "Unavailable",
income_moe_pct < 5    ~ "High Confidence",
income_moe_pct <= 10  ~ "Moderate Confidence",
income_moe_pct > 10   ~ "Low Confidence"
)
)
# quick preview
knitr::kable(
county_reliability %>%
dplyr::select(county, med_incomeE, med_incomeM, income_moe_pct, reliability) %>%
head(10),
caption = "Income MOE% + reliability category (first 10)",
digits = c(0, 0, 0, 1)
)
# ---- 2.2C: unreliable flag + summary table ----
county_reliability <- county_reliability %>%
dplyr::mutate(unreliable = income_moe_pct > 10)
rel_summary <- county_reliability %>%
dplyr::count(reliability) %>%
dplyr::mutate(pct = round(100 * n / sum(n), 1)) %>%
dplyr::arrange(match(reliability, c("High Confidence","Moderate Confidence","Low Confidence","Unavailable")))
knitr::kable(rel_summary, caption = "County reliability categories", digits = 1)
# ---- 2.3: Top 5 counties by income MOE% ----
top5_uncertainty <- county_reliability %>%
dplyr::filter(!is.na(income_moe_pct)) %>%                 # ignore rows where MOE% couldn't be computed
dplyr::arrange(dplyr::desc(income_moe_pct)) %>%           # highest MOE% first
dplyr::slice(1:5) %>%                                     # top 5
dplyr::transmute(                                         # select + rename for presentation
county,
`Median income ($)` = med_incomeE,
`Income MOE ($)`    = med_incomeM,
`Income MOE %`      = sprintf("%.1f%%", income_moe_pct),
Reliability         = reliability
)
knitr::kable(
top5_uncertainty,
caption = "Top 5 counties by median income MOE% (ACS 2022 5-year)"
)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
# Set your Census API key
# Choose your state for analysis - assign it to a variable called my_state
library(tidycensus)
library(tidyverse)
library(knitr)
library(stringr)
options(tigris_use_cache = TRUE)
my_state <- "New York"
# Write your get_acs() code here
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
# Display the first few rows
# ---- 2.1 County-level data (ACS 2022 5-year) ----
vars <- c(
med_income = "B19013_001",  # Median household income
total_pop  = "B01003_001"   # Total population
)
county_raw <- get_acs(
geography = "county",
variables = vars,
year = 2022,
survey = "acs5",
state = my_state,
output = "wide"
)
county <- county_raw %>%
mutate(
county = NAME %>%
stringr::str_remove(",\\s*.*$") %>%  # drop ", State"
stringr::str_remove("\\s*County$")   # drop trailing "County"
) %>%
select(
county, GEOID,
med_incomeE, med_incomeM,
total_popE,  total_popM
)
knitr::kable(
head(county, 10),
caption = paste("County-level ACS (2022 5-year) for", my_state),
digits = 0
)
# Calculate MOE percentage and reliability categories using mutate()
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# ---- 2.2A: compute MOE% for median income ----
county_moe <- county %>%
dplyr::mutate(
income_moe_pct = dplyr::if_else(
!is.na(med_incomeE) & med_incomeE > 0 & !is.na(med_incomeM),
100 * med_incomeM / med_incomeE,
NA_real_
)
)
# peek at just the columns we care about
knitr::kable(
county_moe %>%
dplyr::select(county, med_incomeE, med_incomeM, income_moe_pct) %>%
head(10),
caption = "MOE% for median income (first 10 counties)",
digits = c(0, 0, 0, 1)
)
# ---- 2.2B: add reliability category ----
county_reliability <- county_moe %>%
dplyr::mutate(
reliability = dplyr::case_when(
is.na(income_moe_pct) ~ "Unavailable",
income_moe_pct < 5    ~ "High Confidence",
income_moe_pct <= 10  ~ "Moderate Confidence",
income_moe_pct > 10   ~ "Low Confidence"
)
)
# quick preview
knitr::kable(
county_reliability %>%
dplyr::select(county, med_incomeE, med_incomeM, income_moe_pct, reliability) %>%
head(10),
caption = "Income MOE% + reliability category (first 10)",
digits = c(0, 0, 0, 1)
)
# ---- 2.2C: unreliable flag + summary table ----
county_reliability <- county_reliability %>%
dplyr::mutate(unreliable = income_moe_pct > 10)
rel_summary <- county_reliability %>%
dplyr::count(reliability) %>%
dplyr::mutate(pct = round(100 * n / sum(n), 1)) %>%
dplyr::arrange(match(reliability, c("High Confidence","Moderate Confidence","Low Confidence","Unavailable")))
knitr::kable(rel_summary, caption = "County reliability categories", digits = 1)
# Create table of top 5 counties by MOE percentage
# Format as table with kable() - include appropriate column names and caption
# ---- 2.3: Top 5 counties by income MOE% ----
top5_uncertainty <- county_reliability %>%
dplyr::filter(!is.na(income_moe_pct)) %>%                 # ignore rows where MOE% couldn't be computed
dplyr::arrange(dplyr::desc(income_moe_pct)) %>%           # highest MOE% first
dplyr::slice(1:5) %>%                                     # top 5
dplyr::transmute(                                         # select + rename for presentation
county,
`Median income ($)` = med_incomeE,
`Income MOE ($)`    = med_incomeM,
`Income MOE %`      = sprintf("%.1f%%", income_moe_pct),
Reliability         = reliability
)
knitr::kable(
top5_uncertainty,
caption = "Top 5 counties by median income MOE% (ACS 2022 5-year)"
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
# Define your race/ethnicity variables with descriptive names
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
# Create a nicely formatted table of your results using kable()
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
